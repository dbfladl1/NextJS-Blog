{
  "devlog": {
    "introduce": {
      "title": "프로젝트 소개",
      "intro_1": "Next.js, TypeScript, Supabase, Tailwind ",
      "intro_2": "를 이용해 프론트엔드부터 백엔드까지 구현한 사이드 프로젝트이자 프로필 페이지입니다.",
      "intro_3": "'나라는 사람을 어떻게 표현할까?'",
      "intro_4": "이라는 이름은 JavaScript의",
      "intro_5": " 선언처럼, 이미 존재하지만 계속해서 변화하고 성장하는 객체로서의 저를 표현하고 싶었습니다.",
      "intro_6": "그리고 몰래 노렸던 말장난",
      "intro_7": "“let me introduce myself”",
      "intro_8": "도 함께요😂"
    },
    "skills": {
      "title": "기술적인 구성",
      "architecture": "페이지 특성에 따라 렌더링 방식을 구분했습니다.",
      "architecture_feat_1": {
        "span_1": "변경이 잦지 않은 ",
        "span_2": "PROFILE, PORTFOLIO, POST, DEVLOG",
        "span_3": "페이지는 ",
        "span_4": "SSG",
        "span_5": "로 구성"
      },
      "architecture_feat_2": {
        "span_1": "예측할 수 없는 시점에 글이 등록되는 ",
        "span_2": "GUESTBOOK",
        "span_3": "페이지는 ",
        "span_4": "CSR",
        "span_5": "로 처리"
      },
      "architecture_feat_3": {
        "span_1": "모바일에서도 불편함 없이 볼 수 있도록 반응형으로 제작"
      },
      "architecture_feat_4": {
        "span_1": "i18n ",
        "span_2" :"라이브러리를 이용, 브라우저 기반에 따른 언어 제공, guestbook은 google translate api 사용"
      },
      "project_detail": {
        "title": "개발 시 신경 쓴 부분",
        "detail_feat_1": {
          "span_1": "재사용 가능한 로직의 모듈화",
          "span_2": "예: 공통된 response 반환 로직을",
          "span_3": "utils/apiRes.ts",
          "span_4": "로 분리"
        },
        "detail_feat_2": {
          "span_1": "명확한 타입 설계",
          "span_2": "예: 각 데이터 목적에 맞는 Type 구조화"
        },
        "detail_feat_3": {
          "span_1": "localStorage 관리 개선",
          "span_2": "예: Storage 클래스를 생성하고 key를 고정해 상속받아 사용 → 컴포넌트 어디서든 일관된 접근 가능 & 오타 방지"
        }
      },
      "etc":{
        "title": "더 자세한 이야기",
        "sub" : "프로젝트를 진행하며 마주친 기술적 고민이나 시행착오는 아래 노션 페이지에 정리해 두었습니다."
      }
    }
  }
}
